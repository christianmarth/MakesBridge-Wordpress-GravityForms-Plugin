<?php
/*
Plugin Name: Makesbridge
*/

function makesbridge($user_id){
/*echo "<pre>";
	print_r($user_id);
echo "</pre>";

echo "First Name :" . $user_id->data->first_name;

echo "Last Name :" . $user_id->data->last_name;

echo "Email :" . $user_id->data->user_email;
*/
$token = makesbridge_login();
makesbridge_get_lists($token);
makesbridge_add_subscribers($token,$user_id);

}

function makesbridge_login(){
	$content = "<?xml version='1.0' ?>
		 <login>
		 <userId>cloudgroup</userId>
		 <api_tk>pw6fGZnxOszAj6wMRroFYovzPQLQS2wV</api_tk>
		 </login>";
	$headers = array("Content-type: text/xml");
	$ch = curl_init();
	curl_setopt($ch, CURLOPT_URL, "http://test.bridgemailsystem.com/pms/services/login/");
	curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
	curl_setopt($ch, CURLOPT_TIMEOUT, 4);
	curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
	curl_setopt($ch, CURLOPT_POSTFIELDS, $content);
	curl_setopt($ch, CURLOPT_HEADER, true);
	$data = curl_exec($ch);
	if (curl_errno($ch)) {
	    print curl_error($ch);
	} else {
	    $info = curl_getinfo($ch);
	    curl_close($ch);
	    $header = substr($data, 0, $info['header_size']);
	    $headers = http_parse_headers($header);
	    $authTk = $headers['Auth_tk'];
	    return($authTk);
	}

}

function makesbridge_add_subscribers($token,$user_id){
	echo $token;
	$user = get_userdata( $user_id );
	
	$content = "<?xml version='1.0' ?>
			<addsubscriber listName='wordpress'>
			<subscriber>
			<email>" . $user->user_email . "</email>
			<firstName>" . $user->first_name . "</firstName>
			<lastName>" . $user->last_name . "</lastName>
			</subscriber>
			</addsubscriber>";

	$headers = array(
		"Content-type: text/xml",
		'userId: cloudgroup',
		'auth_tk: ' . $token);

	$ch = curl_init();
	curl_setopt($ch, CURLOPT_URL, "http://test.bridgemailsystem.com/pms/services/addsubscriber/");
	curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
	curl_setopt($ch, CURLOPT_TIMEOUT, 4);
	curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
	curl_setopt($ch, CURLOPT_POSTFIELDS, $content);
	curl_setopt($ch, CURLOPT_HEADER, true);
	$data = curl_exec($ch);
		if (curl_errno($ch)) {
		    print curl_error($ch);
		} else {
		    $info = curl_getinfo($ch);
		    curl_close($ch);
	    
	//	   print_r($data);
	$message = $data . "\r\n"
		."user id :" 
		. $user->user_email . $user->first_name;
		
		
	mail('christian.marth@cloudgroup.com.au', 'Test Message', $message);	   
		   
		    return($data);
		    };
		}

function makesbridge_get_lists($token){

	$headers = array(
	'userId: cloudgroup',
	'auth_tk: ' . $token
		);

	$ch = curl_init();
	curl_setopt($ch, CURLOPT_URL, "http://test.bridgemailsystem.com/pms/services/getlistinfo/");
	curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
	curl_setopt($ch, CURLOPT_TIMEOUT, 4);
	curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
	curl_setopt($ch, CURLOPT_POSTFIELDS, $content);
	curl_setopt($ch, CURLOPT_HEADER, true);
	$data = curl_exec($ch);
	if (curl_errno($ch)) {
	    print curl_error($ch);
	} else {
	    $info = curl_getinfo($ch);
	    curl_close($ch);
	    
	   //print_r($data);
	    return($data);
	    };

}

    function http_parse_headers($header) {
	$retVal = array();
	$fields = explode("\r\n", preg_replace('/\x0D\x0A[\x09\x20]+/', ' ', $header));
	foreach ($fields as $field) {
	    if (preg_match('/([^:]+): (.+)/m', $field, $match)) {
		$match[1] = preg_replace('/(?<=^|[\x09\x20\x2D])./e', 'strtoupper("\0")', strtolower(trim($match[1])));
		if (isset($retVal[$match[1]])) {
		    $retVal[$match[1]] = array($retVal[$match[1]], $match[2]);
		} else {
		    $retVal[$match[1]] = trim($match[2]);
		}
	    }
	}
	return $retVal;
    }

add_action("user_register","makesbridge")


?>
